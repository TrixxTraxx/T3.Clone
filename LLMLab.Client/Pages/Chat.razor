@page "/"
@page "/chat"
@page "/chat/{ThreadId:int}"
@using LLMLab.Client.Caches
@using LLMLab.Client.Components.Chat
@using LLMLab.Client.Models
@using LLMLab.Client.Services
@inject MessageSyncService MessageSyncService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject ThreadSyncService ThreadSyncService
@inject NavigationManager NavigationManager

<PageTitle>LLM Lab - AI Chat Assistant</PageTitle>

<div class="chat-container">
    <div class="chat-messages-container">
        @if (isLoading)
        {
            <div class="chat-loading-container">
                <MudProgressCircular Indeterminate="true" Size="Size.Medium" />
                <MudText Typo="Typo.h6" Class="mt-4">Loading conversation...</MudText>
            </div>
        }
        else
        {
            <ChatTree
                Messages="currentBranch"
                OnMessageContentChanged="OnMessageContentChanged"
                OnRegenerateMessage="RegenerateMessage"
                OnSuggestionClicked="HandleSuggestionClick"
            />
        }
    </div>
    
    <ChatInput 
        @ref="ChatInput"
        OnSendMessage="HandleSendMessage" 
        OnAttachmentAdded="HandleAttachment"
        IsLoading="isSending"
        IsLastMessageComplete="IsLastMessageComplete" />

    @if (!_wasScrolledToBottom)
    {
    <div class="scroll-to-bottom-btn" title="Scroll to bottom" @onclick="ScrollToBottom">
        <svg width="28" height="28" viewBox="0 0 28 28" fill="none">
            <circle cx="14" cy="14" r="13" fill="rgba(32,32,32,0.75)" />
            <path d="M9 13l5 5 5-5" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M14 7v11" stroke="white" stroke-width="2" stroke-linecap="round"/>
        </svg>
    </div>
    }
</div>

@code {
    [Parameter]
    public int? ThreadId { get; set; }
    public ThreadCache? Thread { get; set; }
    
    public ChatInput ChatInput { get; set; }

    private MessageTreeDto? messageTree;
    private bool isLoading = false;
    private bool isSending = false;
    
    //the down most message of the current Branch
    private int currentBranchPath;
    private List<MessageCache> currentBranch = new();
    
    private bool _wasScrolledToBottom = true;
    private DotNetObjectReference<Chat>? _chatRef; // replace with your component name!
    
    private bool IsLastMessageComplete => currentBranch.Count == 0 || currentBranch[0].Message.Complete;
    
    [JSInvokable]
    public void SetScrolledToBottom(bool atBottom)
    {
        if (_wasScrolledToBottom == atBottom) return;
        _wasScrolledToBottom = atBottom;
        InvokeAsync(StateHasChanged);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _chatRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setupChatScrollHandler", _chatRef);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadChat();
        ThreadSyncService.ThreadsUpdated += ThreadsUpdated;
    }

    private void ThreadsUpdated(List<ThreadCache> threads)
    {
        UpdateMessages();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadChat();
    }

    public void UpdateMessages()
    {
        InvokeAsync(async () =>
        {
            try
            {
                await LoadChat();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error updating messages: {ex.Message}");
            }
        });
    }

    private async Task LoadChat()
    {
        if (ThreadId.HasValue)
        {
            isLoading = true;
            StateHasChanged();

            try
            {
                var oldMessageid = currentBranchPath;
                messageTree = await MessageSyncService.GetMessageTree(ThreadId.Value);
                InitializeBranchPath();
                if (oldMessageid == currentBranchPath && !isLoading)
                {
                    //nothing changed
                    return;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading chat: {ex.Message}");
                messageTree = null;
            }

            isLoading = false;
            StateHasChanged();
        }
        else
        {
            messageTree = null;
            currentBranch = new List<MessageCache>();
            currentBranchPath = 0;
            StateHasChanged();
        }
        _ = Task.Run((Func<Task>) (async() =>
        {
            // await Task.Delay(50);
            await JSRuntime.InvokeVoidAsync("focusElement", ChatInput.TextareaRef);
            await JSRuntime.InvokeVoidAsync("setupChatInputAutoFocus", ChatInput.TextareaRef);
            await JSRuntime.InvokeVoidAsync("scrollChatToBottomNoAnimation");
        })); 
    }

    private void InitializeBranchPath()
    {
        if (messageTree == null) return;
        
        currentBranchPath = messageTree.StartMessageId;
        
        // Build the path from start to end
        currentBranch = messageTree.GetMessagesForBranch(currentBranchPath);
    }

    private async Task HandleSendMessage(MessageDto message)
    {
        if (string.IsNullOrWhiteSpace(message.Text)) return;

        isSending = true;
        //StateHasChanged();
        
        message.ThreadId = ThreadId ?? 0;
        message.PreviousMessageId = currentBranchPath;
        
        try
        {
            // Add user message to display
            var messageCache = new MessageCache
            {
                Message = message
            };
            currentBranch.Insert(0, messageCache);
            StateHasChanged();

            var result = await MessageSyncService.SendMessage(messageCache);
            messageCache.Message = result;
            ThreadId = result.ThreadId;
            currentBranchPath = result.Id;
            
            //set the current location to the message
            //await JSRuntime.InvokeVoidAsync("setHistory", "/chat/" + result.ThreadId);
            NavigationManager.NavigateTo("/chat/" + result.ThreadId, replace: true);
            
            await JSRuntime.InvokeVoidAsync("scrollChatToBottom");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending message: {ex.Message}");
        }

        isSending = false;
        StateHasChanged();
    }

    private void HandleAttachment(ChatAttachment attachment)
    {
        // Handle attachment processing
        Console.WriteLine($"Attachment added: {attachment.Name}");
    }
    
    private async Task OnMessageContentChanged()
    {
        // Only scroll if user was at the bottom
        if (_wasScrolledToBottom)
            await JSRuntime.InvokeVoidAsync("scrollChatToBottomNoAnimation");
    }
    
    public async ValueTask DisposeAsync()
    {
        if (ChatInput?.TextareaRef != null)
        {
            await JSRuntime.InvokeVoidAsync("removeChatInputAutoFocus", ChatInput.TextareaRef);
        }
        await JSRuntime.InvokeVoidAsync("cleanupChatScrollHandler");
        _chatRef?.Dispose();
    }

    private async Task RegenerateMessage(MessageCache message)
    {
        var newMessage = new MessageDto
        {
            Text = message.Message.Text,
            AttachmentIds = message.Message.AttachmentIds,
            PreviousMessageId = message.Message.PreviousMessageId,
            ModelId = ChatInput.SelectedModelId,
            ReasoningEffortLevel = ChatInput.SelectedReasoningLevel
        };
        currentBranchPath = message.Message.PreviousMessageId;
        //reset current branch up to the message
        currentBranch = messageTree?.GetMessagesForBranch(currentBranchPath) ?? new List<MessageCache>();
        await HandleSendMessage(newMessage);
    }

    private async Task HandleSuggestionClick(string suggestionText)
    {
        if (ChatInput != null)
        {
            await ChatInput.SetText(suggestionText);
        }
    }
    
    private async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollChatToBottom");
    }
} 