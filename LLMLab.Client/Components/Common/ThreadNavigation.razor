@using LLMLab.Client.Caches
@using LLMLab.Client.Services
@inject NavigationManager NavigationManager
@inject ThreadSyncService ThreadSyncService
@inject IJSRuntime JSRuntime

<div class="thread-navigation">
    @{
        var today = DateTime.Today;
        var thisWeek = today.AddDays(-7);
        var thisMonth = today.AddMonths(-1);
        
        var todayThreads = Threads.Where(x => !x.Thread.Deleted && x.Thread.UpdatedAt.Date == today).OrderByDescending(x => x.Thread.UpdatedAt);
        var thisWeekThreads = Threads.Where(x => !x.Thread.Deleted && x.Thread.UpdatedAt.Date < today && x.Thread.UpdatedAt.Date >= thisWeek).OrderByDescending(x => x.Thread.UpdatedAt);
        var thisMonthThreads = Threads.Where(x => !x.Thread.Deleted && x.Thread.UpdatedAt.Date < thisWeek && x.Thread.UpdatedAt.Date >= thisMonth).OrderByDescending(x => x.Thread.UpdatedAt);
        var olderThreads = Threads.Where(x => !x.Thread.Deleted && x.Thread.UpdatedAt.Date < thisMonth).OrderByDescending(x => x.Thread.UpdatedAt);
    }

    @if (todayThreads.Any())
    {
        <div class="thread-group">
            <div class="thread-group-header">Today</div>
            @foreach(var cache in todayThreads)
            {
                <ThreadNavItem Cache="cache" IsActive="IsActive(cache.Thread.Id)" OnThreadSelected="OnThreadSelected" />
            }
        </div>
    }

    @if (thisWeekThreads.Any())
    {
        <div class="thread-group">
            <div class="thread-group-header">This Week</div>
            @foreach(var cache in thisWeekThreads)
            {
                <ThreadNavItem Cache="cache" IsActive="IsActive(cache.Thread.Id)" OnThreadSelected="OnThreadSelected" />
            }
        </div>
    }

    @if (thisMonthThreads.Any())
    {
        <div class="thread-group">
            <div class="thread-group-header">This Month</div>
            @foreach(var cache in thisMonthThreads)
            {
                <ThreadNavItem Cache="cache" IsActive="IsActive(cache.Thread.Id)" OnThreadSelected="OnThreadSelected" />
            }
        </div>
    }

    @if (olderThreads.Any())
    {
        <div class="thread-group">
            <div class="thread-group-header">Older</div>
            @foreach(var cache in olderThreads)
            {
                <ThreadNavItem Cache="cache" IsActive="IsActive(cache.Thread.Id)" OnThreadSelected="OnThreadSelected" />
            }
        </div>
    }
</div>

@code {
    [Parameter] public List<ThreadCache> Threads { get; set; } = new();
    [Parameter] public EventCallback<int> OnThreadSelected { get; set; }
    [Parameter] public int? CurrentThreadId { get; set; }

    private bool IsActive(int threadId)
    {
        return CurrentThreadId == threadId;
    }
} 