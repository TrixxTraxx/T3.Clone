@using LLMLab.Client.Components.Common
@inject IJSRuntime JSRuntime

<div class="model-modal-overlay @(IsVisible ? "visible" : "")" @onclick="@(() => CloseModal())" @onkeydown="@HandleKeyDown" tabindex="-1">
    <div class="model-modal-container" @onclick:stopPropagation="true">
        <div class="model-modal-header">
            <h3 class="modal-title">Select AI Model</h3>
            <button class="modal-close-btn" @onclick="CloseModal" type="button">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z"/>
                </svg>
            </button>
        </div>
        
        <!-- Search Bar -->
        <div class="search-section">
            <div class="search-input-wrapper">
                <svg class="search-icon" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M15.5 14h-.79l-.28-.27A6.5 6.5 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                </svg>
                <input type="text" @bind="searchQuery" @bind:event="oninput" placeholder="Search models..." class="search-input" />
                @if (!string.IsNullOrEmpty(searchQuery))
                {
                    <button class="clear-search-btn" @onclick="ClearSearch" type="button">
                        <svg viewBox="0 0 24 24" fill="currentColor">
                            <path d="M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z"/>
                        </svg>
                    </button>
                }
            </div>
        </div>
        
        <div class="model-modal-content">
            @if (FilteredModels?.Any() == true)
            {
                @foreach (var category in GetCategorizedModels())
                {
                    <div class="model-category">
                        <div class="category-header">
                            <div class="category-info">
                                <div class="category-icon @GetCategoryClass(category.Key)">
                                    @GetCategoryIcon(category.Key)
                                </div>
                                <span class="category-name">@category.Key</span>
                                <span class="category-count">(@category.Value.Count)</span>
                            </div>
                        </div>
                        
                        <div class="models-grid">
                            @foreach (var model in category.Value)
                            {
                                <div class="model-card-compact @(model.Id == SelectedModelId ? "selected" : "") @(!model.HasRequiredApiKey ? "disabled" : "")" 
                                     @onclick="() => SelectModel(model.Id)"
                                     @onkeydown="@((e) => HandleModelKeyDown(e, model.Id))"
                                     tabindex="0">
                                    
                                    <div class="model-header-row">
                                        <div class="model-info">
                                            <h4 class="model-name-compact">@model.Name</h4>
                                            @if (model.IsDefault)
                                            {
                                                <span class="default-badge-compact">Default</span>
                                            }
                                            @if (!model.HasRequiredApiKey)
                                            {
                                                <span class="api-key-required-badge">API Key Required</span>
                                            }
                                        </div>
                                        
                                        @if (model.Id == SelectedModelId)
                                        {
                                            <div class="selection-indicator-compact">
                                                <svg viewBox="0 0 24 24" fill="currentColor">
                                                    <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                                                </svg>
                                            </div>
                                        }
                                    </div>
                                    
                                    @if (!string.IsNullOrWhiteSpace(model.Description))
                                    {
                                        <p class="model-description-compact">@model.Description</p>
                                    }
                                    
                                    <div class="model-bottom-row">
                                        <div class="model-capabilities-compact">
                                            @if (model.HasImageSupport)
                                            {
                                                <div class="capability-icon image" title="Image Support">
                                                    <svg viewBox="0 0 24 24" fill="currentColor">
                                                        <path d="M21 19V5C21 3.9 20.1 3 19 3H5C3.9 3 3 3.9 3 5V19C3 20.1 3.9 21 5 21H19C20.1 21 19 20.1 19 19ZM8.5 13.5L11 16.51L14.5 12L19 18H5L8.5 13.5Z"/>
                                                    </svg>
                                                </div>
                                            }
                                            
                                            @if (model.HasThinkingSupport)
                                            {
                                                <div class="capability-icon thinking" title="Thinking Support">
                                                    <svg viewBox="0 0 24 24" fill="currentColor">
                                                        <path d="M9 21C9 21.5 9.4 22 10 22H14C14.6 22 15 21.5 15 21V20H9V21ZM12 2C8.1 2 5 5.1 5 9C5 11.4 6.2 13.5 8 14.7V17C8 17.5 8.4 18 9 18H15C15.6 18 16 17.5 16 17V14.7C17.8 13.5 19 11.4 19 9C19 5.1 15.9 2 12 2Z"/>
                                                    </svg>
                                                </div>
                                            }
                                            
                                            @if (model.HasImageGenerationSupport)
                                            {
                                                <div class="capability-icon generation" title="Image Generation">
                                                    <svg viewBox="0 0 24 24" fill="currentColor">
                                                        <path d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L19 5L17 7V9C16.45 9 16 9.45 16 10V16C16 16.55 16.45 17 17 17H19C19.55 17 20 16.55 20 16V10C20 9.45 19.55 9 19 9ZM7 9V7L5 5L3 7V9C2.45 9 2 9.45 2 10V16C2 16.55 2.45 17 3 17H5C5.55 17 6 16.55 6 16V10C6 9.45 5.55 9 5 9ZM14 18C14 19.1 13.1 20 12 20C10.9 20 10 19.1 10 20C10 21.1 10.9 22 12 22C13.1 22 14 21.1 14 20Z"/>
                                                    </svg>
                                                </div>
                                            }
                                        </div>
                                        
                                        @if (model.MaxInputTokens > 0 || model.MaxOutputTokens > 0)
                                        {
                                            <div class="model-stats">
                                                @if (model.MaxInputTokens > 0)
                                                {
                                                    <span class="stat-item">@FormatTokenCount(model.MaxInputTokens)</span>
                                                }
                                                @if (model.MaxOutputTokens > 0)
                                                {
                                                    <span class="stat-divider">â†’</span>
                                                    <span class="stat-item">@FormatTokenCount(model.MaxOutputTokens)</span>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-models">
                    @if (!string.IsNullOrEmpty(searchQuery))
                    {
                        <p>No models found matching "@searchQuery"</p>
                    }
                    else
                    {
                        <p>No AI models available</p>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public List<AiModelDto>? Models { get; set; }
    [Parameter] public int SelectedModelId { get; set; }
    [Parameter] public EventCallback<int> OnModelSelected { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    
    private string searchQuery = "";
    
    private List<AiModelDto>? FilteredModels
    {
        get
        {
            if (Models == null) return null;
            
            if (string.IsNullOrEmpty(searchQuery))
                return Models;
                
            return Models.Where(m => 
                m.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                (!string.IsNullOrEmpty(m.Description) && m.Description.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
            ).ToList();
        }
    }
    
    private Dictionary<string, List<AiModelDto>> GetCategorizedModels()
    {
        if (FilteredModels == null) return new Dictionary<string, List<AiModelDto>>();
        
        var categorized = new Dictionary<string, List<AiModelDto>>();
        
        foreach (var model in FilteredModels)
        {
            var category = GetModelCategory(model);
            
            if (!categorized.ContainsKey(category))
                categorized[category] = new List<AiModelDto>();
                
            categorized[category].Add(model);
        }
        
        // Sort categories: Default first, then categories with API keys, then categories without API keys
        var sortedCategories = categorized
            .OrderBy(kvp => GetCategoryPriority(kvp.Key))
            .ThenBy(kvp => HasApiKeyConfigured(kvp.Value) ? 0 : 1) // Categories with API keys first
            .ThenBy(kvp => kvp.Key)
            .ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
            
        return sortedCategories;
    }
    
    private bool HasApiKeyConfigured(List<AiModelDto> modelsInCategory)
    {
        // A category has API key configured if any model in it has HasRequiredApiKey = true
        return modelsInCategory.Any(m => m.HasRequiredApiKey);
    }
    
    private string GetModelCategory(AiModelDto model)
    {
        // Models without RequiredApiKey go to Default category (top)
        if (string.IsNullOrEmpty(model.RequiredApiKey))
            return "Default";
            
        // Use RequiredApiKey directly, but format it nicely
        return model.RequiredApiKey switch
        {
            "OpenAi" => "OpenAI",
            "Anthropic" => "Anthropic", 
            "Google" => "Google",
            _ => model.RequiredApiKey // Use the RequiredApiKey directly for any other providers
        };
    }
    
    private int GetCategoryPriority(string category)
    {
        return category switch
        {
            "Default" => 0,
            _ => 1  // Any other categories go after Default
        };
    }
    
    private string GetCategoryClass(string category)
    {
        return category.ToLower() switch
        {
            "default" => "default", 
            "openai" => "openai",
            "anthropic" => "anthropic",
            "google" => "google",
            _ => "other"
        };
    }
    
    private RenderFragment GetCategoryIcon(string category)
    {
        var providerInfo = GetProviderInfo(category);
        
        return @<ProviderIcon ImagePath="@providerInfo.LogoPath"
                              Icon="@providerInfo.Icon"
                              Color="@providerInfo.Color"
                              AltText="@category"
                              Size="20px" />;
    }
    
    private (string LogoPath, string Icon, Color Color) GetProviderInfo(string category)
    {
        return category.ToLower() switch
        {
            "default" => ("", Icons.Material.Filled.Stars, MudBlazor.Color.Primary),
            "openai" => ("images/logos/openai-logo.svg", Icons.Material.Filled.Psychology, MudBlazor.Color.Success),
            "anthropic" => ("images/logos/anthropic-logo.svg", Icons.Material.Filled.SmartToy, MudBlazor.Color.Warning),
            "google" => ("images/logos/google-logo.svg", Icons.Material.Filled.Search, MudBlazor.Color.Error),
            _ => ("", Icons.Material.Filled.SmartToy, MudBlazor.Color.Default)
        };
    }
    
    private void ClearSearch()
    {
        searchQuery = "";
    }
    
    private async Task SelectModel(int modelId)
    {
        // Don't allow selection of models without API keys
        var model = Models?.FirstOrDefault(m => m.Id == modelId);
        if (model?.HasRequiredApiKey == false) return;
        
        await OnModelSelected.InvokeAsync(modelId);
        await CloseModal();
    }
    
    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }
    
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            await CloseModal();
        }
    }
    
    private async Task HandleModelKeyDown(KeyboardEventArgs e, int modelId)
    {
        if (e.Key == "Enter" || e.Key == " ")
        {
            await SelectModel(modelId);
        }
    }
    
    private string FormatTokenCount(int tokens)
    {
        if (tokens >= 1000000)
        {
            return $"{tokens / 1000000.0:F1}M";
        }
        if (tokens >= 1000)
        {
            return $"{tokens / 1000.0:F0}K";
        }
        return tokens.ToString();
    }
} 