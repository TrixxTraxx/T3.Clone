@page "/Account/Manage/ExternalLogins"
@using LLMLab.Server.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IUserStore<ApplicationUser> UserStore
@inject IdentityRedirectManager RedirectManager

<PageTitle>Manage External Logins</PageTitle>

<div class="manage-section-title">External Login Management</div>
<div class="manage-section-subtitle">Connect or disconnect external authentication providers</div>

<StatusMessage/>

@if (currentLogins?.Count > 0)
{
    <div class="manage-section-title" style="font-size: 1.25rem; margin-top: 2rem;">Connected Accounts</div>
    
    <MudGrid Spacing="2">
        @foreach (var login in currentLogins)
        {
            <MudItem md="12">
                <MudCard Elevation="2" Class="pa-4">
                    <MudCardContent Class="d-flex align-center justify-space-between">
                        <div class="d-flex align-center">
                            <MudIcon Icon="@GetProviderIcon(login.LoginProvider)" Color="Color.Primary" Class="mr-3"/>
                            <div>
                                <MudText Typo="Typo.subtitle1">@login.ProviderDisplayName</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Connected</MudText>
                            </div>
                        </div>
                        @if (showRemoveButton)
                        {
                            <form @formname="@($"remove-login-{login.LoginProvider}")" @onsubmit="OnSubmitAsync" method="post">
                                <AntiforgeryToken/>
                                <input type="hidden" name="@nameof(LoginProvider)" value="@login.LoginProvider"/>
                                <input type="hidden" name="@nameof(ProviderKey)" value="@login.ProviderKey"/>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" 
                                           Color="Color.Error" Size="Size.Small">
                                    Remove
                                </MudButton>
                            </form>
                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
}

@if (otherLogins?.Count > 0)
{
    <div class="manage-section-title" style="font-size: 1.25rem; margin-top: 3rem;">Available Providers</div>
    <div class="manage-section-subtitle">Add another service to log in with</div>
    
    <form class="form-horizontal" action="Account/Manage/LinkExternalLogin" method="post">
        <AntiforgeryToken/>
        <MudGrid Spacing="2">
            @foreach (var provider in otherLogins)
            {
                <MudItem md="6">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" 
                               Color="Color.Primary" FullWidth="true" Size="Size.Large"
                               StartIcon="@GetProviderIcon(provider.Name)"
                               name="Provider" value="@provider.Name">
                        Connect @provider.DisplayName
                    </MudButton>
                </MudItem>
            }
        </MudGrid>
    </form>
}

@code {
    public const string LinkLoginCallbackAction = "LinkLoginCallback";

    private ApplicationUser user = default!;
    private IList<UserLoginInfo>? currentLogins;
    private IList<AuthenticationScheme>? otherLogins;
    private bool showRemoveButton;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private string? LoginProvider { get; set; }

    [SupplyParameterFromForm] private string? ProviderKey { get; set; }

    [SupplyParameterFromQuery] private string? Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        currentLogins = await UserManager.GetLoginsAsync(user);
        otherLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync())
            .Where(auth => currentLogins.All(ul => auth.Name != ul.LoginProvider))
            .ToList();

        string? passwordHash = null;
        if (UserStore is IUserPasswordStore<ApplicationUser> userPasswordStore)
        {
            passwordHash = await userPasswordStore.GetPasswordHashAsync(user, HttpContext.RequestAborted);
        }

        showRemoveButton = passwordHash is not null || currentLogins.Count > 1;

        if (HttpMethods.IsGet(HttpContext.Request.Method) && Action == LinkLoginCallbackAction)
        {
            await OnGetLinkLoginCallbackAsync();
        }
    }

    private async Task OnSubmitAsync()
    {
        var result = await UserManager.RemoveLoginAsync(user, LoginProvider!, ProviderKey!);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not removed.", HttpContext);
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("The external login was removed.", HttpContext);
    }

    private async Task OnGetLinkLoginCallbackAsync()
    {
        var userId = await UserManager.GetUserIdAsync(user);
        var info = await SignInManager.GetExternalLoginInfoAsync(userId);
        if (info is null)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Could not load external login info.", HttpContext);
        }

        var result = await UserManager.AddLoginAsync(user, info);
        if (!result.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: The external login was not added. External logins can only be associated with one account.", HttpContext);
        }

        // Clear the existing external cookie to ensure a clean login process
        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);

        RedirectManager.RedirectToCurrentPageWithStatus("The external login was added.", HttpContext);
    }

    private string GetProviderIcon(string providerName) => providerName.ToLower() switch
    {
        "google" => Icons.Custom.Brands.Google,
        "microsoft" => Icons.Custom.Brands.Microsoft,
        "github" => Icons.Custom.Brands.GitHub,
        "facebook" => Icons.Custom.Brands.Facebook,
        "twitter" => Icons.Custom.Brands.Twitter,
        _ => Icons.Material.Filled.Login
    };
}