@page "/Account/Register"
@layout AuthLayout
@using System.Text
@using System.Text.Encodings.Web
@using LLMLab.Server.Components.Layout
@using LLMLab.Server.Data
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IConfiguration Configuration

<PageTitle>Register - LLM Lab</PageTitle>

<div class="login-container">
    <div class="login-card">        
        <div class="login-brand">
            <div class="login-brand-title">LLM Lab</div>
            <div class="login-brand-subtitle">Join us today</div>
        </div>

        <div class="login-form-section">
            <div class="login-welcome-title">Create your account</div>
            <div class="login-welcome-subtitle">Get started with LLM Lab by creating your account</div>

            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="login-status-message">
                    @Message
                </div>
            }

            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator/>

                <div class="login-form-field">
                    <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                        Label="Email" Placeholder="name@example.com"  Variant="Variant.Outlined"
                                        UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } })"/>
                </div>
                
                <div class="login-form-field">
                    <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                        Label="Password" InputType="InputType.Password" Placeholder="Create a secure password"  Variant="Variant.Outlined"
                                        UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } })"/>
                </div>
                
                <div class="login-form-field">
                    <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                                        Label="Confirm Password" InputType="InputType.Password" Placeholder="Confirm your password" Variant="Variant.Outlined"
                                        UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } })"/>
                </div>
                
                <div class="login-form-field">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" 
                                     FormAction="FormAction.Submit" Size="Size.Large">
                        Create Account
                    </MudStaticButton>
                </div>
            </EditForm>
        </div>

        <div class="login-links-section">
            <div>
                <MudLink Href="Account/Login" Class="login-link">Already have an account? Sign in</MudLink>
            </div>
        </div>

        <div class="login-divider">
            <span>or continue with</span>
        </div>

        <div class="login-external-section">
            <ExternalLoginPicker/>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        user.DisplayName = Input.Email;

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);

        user.ProfilePictureUrl ??= "";
        
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        
        // Check if we should redirect to the client URL instead of the return URL
        if (string.IsNullOrEmpty(ReturnUrl) || ReturnUrl == "/")
        {
            var clientUrl = Configuration["AppSettings:ClientUrl"] + Configuration["AppSettings:ClientAfterLoginPath"];
            if (!string.IsNullOrEmpty(clientUrl))
            {
                NavigationManager.NavigateTo(clientUrl, forceLoad: true);
                return;
            }
        }
        
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private static ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}