@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length == 0)
{
    <MudAlert Variant="Variant.Text" Severity="Severity.Info" Class="login-external-alert">
        <AlertContent>
            No external authentication services configured
        </AlertContent>
    </MudAlert>
    <MudText Typo="Typo.body2" Class="login-external-info">
        External login providers like Google, Microsoft, or GitHub can be configured for easier sign-in.
    </MudText>
}
else
{
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <div>
            <AntiforgeryToken/>
            <input type="hidden" name="ReturnUrl" value="@ReturnUrl"/>
            <div class="login-external-buttons">
                @foreach (var provider in externalLogins)
                {
                    <MudButton ButtonType="ButtonType.Submit" 
                               Variant="Variant.Outlined" 
                               Color="Color.Secondary"
                               FullWidth="true" 
                               Size="Size.Large"
                               StartIcon="@GetProviderIcon(provider.Name)"
                               Class="login-external-button"
                               name="provider" 
                               value="@provider.Name">
                        Continue with @provider.DisplayName
                    </MudButton>
                }
            </div>
        </div>
    </form>
}

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }

    private string GetProviderIcon(string providerName) => providerName.ToLower() switch
    {
        "google" => Icons.Custom.Brands.Google,
        "microsoft" => Icons.Custom.Brands.Microsoft,
        "github" => Icons.Custom.Brands.GitHub,
        "facebook" => Icons.Custom.Brands.Facebook,
        "twitter" => Icons.Custom.Brands.Twitter,
        _ => Icons.Material.Filled.Login
    };
}