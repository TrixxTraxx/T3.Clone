@page "/Account/Manage/Email"
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Manage Email</PageTitle>

<div class="manage-section-title">Email Management</div>
<div class="manage-section-subtitle">Update your email address and confirmation status</div>

<StatusMessage Message="@message"/>

<EditForm Model="Input" FormName="change-email" OnValidSubmit="OnSendEmailVerificationAsync" method="post">
    <DataAnnotationsValidator/>
    <MudGrid Spacing="3">
        @if (isEmailConfirmed)
        {
            <MudItem md="12">
                <MudStaticTextField Value="@email" Label="Current Email" Placeholder="Please enter your email." 
                                    Disabled="true" Variant="Variant.Outlined" 
                                    AdornmentIcon="Icons.Material.Filled.Check" AdornmentColor="Color.Success"/>
            </MudItem>
        }
        else
        {
            <MudItem md="12">
                <MudStaticTextField Value="@email" Label="Current Email" Placeholder="Please enter your email." 
                                    Disabled="true" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem md="12">
                <MudStaticButton Variant="Variant.Filled" Color="Color.Warning" FullWidth="true" 
                                 FormAction="FormAction.Submit" Size="Size.Large">
                    Send Verification Email
                </MudStaticButton>
            </MudItem>
        }

        <MudItem md="12">
            <MudDivider/>
        </MudItem>

        <MudItem md="12">
            <MudText Typo="Typo.h6" Color="Color.Primary">Change Email Address</MudText>
        </MudItem>

        <MudItem md="12">
            <MudStaticTextField @bind-Value="@Input.NewEmail" For="@(() => Input.NewEmail)" 
                                UserAttributes="@(new() { { "autocomplete", "email" }, { "aria-required", "true" } })" 
                                Label="New Email" HelperText="Please enter your new email address." 
                                Variant="Variant.Outlined"/>
        </MudItem>

        <MudItem md="12">
            <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" 
                             FormAction="FormAction.Submit" Size="Size.Large">
                Change Email
            </MudStaticButton>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }
}