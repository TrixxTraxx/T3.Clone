@page "/Account/ResetPassword"
@layout AuthLayout
@using System.Text
@using Microsoft.AspNetCore.WebUtilities

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Reset Password - LLM Lab</PageTitle>

<div class="login-container">
    <div class="login-card">        
        <div class="login-brand">
            <div class="login-brand-title">LLM Lab</div>
            <div class="login-brand-subtitle">Reset Your Password</div>
        </div>

        <div class="login-form-section">
            <div class="login-welcome-title">Create a new password</div>
            <div class="login-welcome-subtitle">Enter your email and create a secure new password for your account</div>

            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="login-status-message">
                    @Message
                </div>
            }

            <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator/>

                <input type="hidden" name="Input.Code" value="@Input.Code"/>
                
                <div class="login-form-field">
                    <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                        Label="Email" Placeholder="name@example.com" Variant="Variant.Outlined"
                                        UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } })"/>
                </div>
                
                <div class="login-form-field">
                    <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                        Label="New Password" InputType="InputType.Password" Placeholder="Create a secure password" Variant="Variant.Outlined"
                                        UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } })"/>
                </div>
                
                <div class="login-form-field">
                    <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                                        Label="Confirm Password" InputType="InputType.Password" Placeholder="Confirm your new password" Variant="Variant.Outlined"
                                        UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } })"/>
                </div>
                
                <div class="login-form-field">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" 
                                     FormAction="FormAction.Submit" Size="Size.Large"
                                     StartIcon="Icons.Material.Filled.LockReset">
                        Reset Password
                    </MudStaticButton>
                </div>
            </EditForm>
        </div>

        <div class="login-links-section">
            <div>
                <MudLink Href="Account/Login" Class="login-link">
                    Remember your password? Sign in
                </MudLink>
            </div>
            <div>
                <MudLink Href="Account/ForgotPassword" Class="login-link">
                    Need a new reset link?
                </MudLink>
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required] public string Code { get; set; } = "";
    }
}