@page "/Account/Login"
@layout AuthLayout

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IConfiguration Configuration

<PageTitle>Log in - T3.Clone</PageTitle>

<div class="login-container">
    <div class="login-card">        
        <div class="login-brand">
            <div class="login-brand-title">T3.Clone</div>
            <div class="login-brand-subtitle">Welcome back</div>
        </div>

        <div class="login-form-section">
            <div class="login-welcome-title">Sign in to your account</div>
            <div class="login-welcome-subtitle">Enter your credentials to access your account</div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="login-status-message">
                    @errorMessage
                </div>
            }

            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator/>

                <div class="login-form-field">
                    <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                        Label="Email" Placeholder="name@example.com" Variant="Variant.Outlined"
                                        UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } })"/>
                </div>
                
                <div class="login-form-field">
                    <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                        Label="Password" InputType="InputType.Password" Placeholder="Enter your password" Variant="Variant.Outlined"
                                        UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } })"/>
                </div>
                
                <div class="login-form-field">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" 
                                     FormAction="FormAction.Submit" Size="Size.Large">
                        Sign in
                    </MudStaticButton>
                </div>
            </EditForm>
        </div>

        <div class="login-links-section">
            <div>
                <MudLink Href="Account/ForgotPassword" Class="login-link">Forgot your password?</MudLink>
            </div>
            <div>
                <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" Class="login-link">
                    Don't have an account? Sign up
                </MudLink>
            </div>
            <div>
                <MudLink Href="Account/ResendEmailConfirmation" Class="login-link">Resend email confirmation</MudLink>
            </div>
        </div>

        <div class="login-divider">
            <span>or continue with</span>
        </div>

        <div class="login-external-section">
            <ExternalLoginPicker/>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, true, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            
            // Check if we should redirect to the client URL instead of the return URL
            if (string.IsNullOrEmpty(ReturnUrl) || ReturnUrl == "/")
            {
                var clientUrl = Configuration["AppSettings:ClientUrl"] + Configuration["AppSettings:ClientAfterLoginPath"];
                if (!string.IsNullOrEmpty(clientUrl))
                {
                    NavigationManager.NavigateTo(clientUrl, forceLoad: true);
                    return;
                }
            }
            
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = true });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Invalid email or password. Please try again.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}