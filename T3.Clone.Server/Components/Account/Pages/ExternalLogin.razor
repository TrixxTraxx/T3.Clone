@page "/Account/ExternalLogin"
@layout AuthLayout
@using System.Security.Claims
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger
@inject IConfiguration Configuration

<PageTitle>Complete Registration - T3.Clone</PageTitle>

<div class="login-container">
    <div class="login-card">        
        <div class="login-brand">
            <div class="login-brand-title">T3.Clone</div>
            <div class="login-brand-subtitle">Complete Your Registration</div>
        </div>

        <div class="login-form-section">
            <div class="login-welcome-title">Associate your @ProviderDisplayName account</div>
            <div class="login-welcome-subtitle">
                You've successfully authenticated with <strong>@ProviderDisplayName</strong>. 
                Please enter an email address to complete your registration.
            </div>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="login-status-message">
                    @message
                </div>
            }

            <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post">
                <DataAnnotationsValidator/>
                
                <div class="login-form-field">
                    <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                        Label="Email" Placeholder="name@example.com" Variant="Variant.Outlined"
                                        UserAttributes="@(new() { { "autocomplete", "email" }, { "aria-required", "true" } })"/>
                </div>
                
                <div class="login-form-field">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" 
                                     FormAction="FormAction.Submit" Size="Size.Large"
                                     StartIcon="@GetProviderIcon(externalLoginInfo?.LoginProvider ?? "")">
                        Complete Registration
                    </MudStaticButton>
                </div>
            </EditForm>
        </div>

        <div class="login-links-section">
            <div>
                <MudLink Href="Account/Login" Class="login-link">Use a different account? Sign in here</MudLink>
            </div>
        </div>
    </div>
</div>

@code {
    public const string LoginCallbackAction = "LoginCallback";

    private string? message;
    private ExternalLoginInfo? externalLoginInfo;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? RemoteError { get; set; }

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery] private string? Action { get; set; }

    private string? ProviderDisplayName => externalLoginInfo?.ProviderDisplayName;

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", $"Error from external provider: {RemoteError}", HttpContext);
        }

        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information.", HttpContext);
        }

        externalLoginInfo = info;

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }

            // We should only reach this page via the login callback, so redirect back to
            // the login page if we get here some other way.
            RedirectManager.RedirectTo("Account/Login");
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        if (externalLoginInfo is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information.", HttpContext);
        }

        // Sign in the user with this external login provider if the user already has a login.
        var result = await SignInManager.ExternalLoginSignInAsync(
            externalLoginInfo!.LoginProvider,
            externalLoginInfo!.ProviderKey,
            isPersistent: false,
            bypassTwoFactor: true);

        if (result.Succeeded)
        {
            Logger.LogInformation(
                "{Name} logged in with {LoginProvider} provider.",
                externalLoginInfo.Principal.Identity?.Name,
                externalLoginInfo.LoginProvider);
                
            // Check if we should redirect to the client URL instead of the return URL
            if (string.IsNullOrEmpty(ReturnUrl) || ReturnUrl == "/")
            {
                var clientUrl = Configuration["AppSettings:ClientUrl"] + Configuration["AppSettings:ClientAfterLoginPath"];
                if (!string.IsNullOrEmpty(clientUrl))
                {
                    NavigationManager.NavigateTo(clientUrl, forceLoad: true);
                    return;
                }
            }
            
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            RedirectManager.RedirectTo("Account/Lockout");
        }

        // If the user does not have an account, then ask the user to create an account.
        if (externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
        {
            Input.Email = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? "";
        }
    }

    private async Task OnValidSubmitAsync()
    {
        if (externalLoginInfo is null)
        {
            RedirectManager.RedirectToWithStatus("Account/Login", "Error loading external login information during confirmation.", HttpContext);
        }

        var emailStore = GetEmailStore();
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        
        user.DisplayName = GetGoogleUserName() ?? Input.Email;
        
        // Set profile picture URL from Google if available
        if (externalLoginInfo.LoginProvider == "Google" || externalLoginInfo.LoginProvider.ToLower().Contains("google"))
        {
            user.ProfilePictureUrl = GetGoogleProfilePictureUrl()!;
        }

        var result = await UserManager.CreateAsync(user);
        if (result.Succeeded)
        {
            result = await UserManager.AddLoginAsync(user, externalLoginInfo);
            if (result.Succeeded)
            {
                Logger.LogInformation("User created an account using {Name} provider.", externalLoginInfo.LoginProvider);

                var userId = await UserManager.GetUserIdAsync(user);
                var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

                var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                    NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                    new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });
                await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

                // If account confirmation is required, we need to show the link if we don't have a real email sender
                if (UserManager.Options.SignIn.RequireConfirmedAccount)
                {
                    RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = Input.Email });
                }

                await SignInManager.SignInAsync(user, isPersistent: false, externalLoginInfo.LoginProvider);
                
                // Check if we should redirect to the client URL instead of the return URL
                if (string.IsNullOrEmpty(ReturnUrl) || ReturnUrl == "/")
                {
                    var clientUrl = Configuration["AppSettings:ClientUrl"] + Configuration["AppSettings:ClientAfterLoginPath"];
                    if (!string.IsNullOrEmpty(clientUrl))
                    {
                        NavigationManager.NavigateTo(clientUrl, forceLoad: true);
                        return;
                    }
                }
                
                RedirectManager.RedirectTo(ReturnUrl);
            }
        }

        message = $"Error: {string.Join(",", result.Errors.Select(error => error.Description))}";
    }

    private static ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor");
        }
    }

    private string GetProviderIcon(string? providerName) => (providerName?.ToLower()) switch
    {
        "google" => Icons.Custom.Brands.Google,
        "microsoft" => Icons.Custom.Brands.Microsoft,
        "github" => Icons.Custom.Brands.GitHub,
        "facebook" => Icons.Custom.Brands.Facebook,
        "twitter" => Icons.Custom.Brands.Twitter,
        _ => Icons.Material.Filled.Login
    };

    private string? GetGoogleProfilePictureUrl()
    {
        // Google provides the picture in a standard claim
        var pictureClaim = externalLoginInfo.Principal.FindFirst("picture") ??
                           externalLoginInfo.Principal.FindFirst("urn:google:picture") ??
                           externalLoginInfo.Principal.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/uri") ??
                           externalLoginInfo.Principal.FindFirst("image") ??
                           externalLoginInfo.Principal.FindFirst("avatar");
        
        if (pictureClaim != null)
        {
            // Some Google APIs append size parameters - we can add our own size parameter to get a larger image
            string pictureUrl = pictureClaim.Value;
            if (pictureUrl.Contains("googleusercontent.com") && !pictureUrl.Contains("=s"))
            {
                // Add size parameter for Google profile pictures (s200-c for 200px circle)
                pictureUrl += pictureUrl.Contains("?") ? "&" : "?";
                pictureUrl += "s200-c";
            }
            return pictureUrl;
        }
        
        // Log all available claims to help debugging
        Logger.LogInformation("Available claims for {Provider}:", externalLoginInfo.LoginProvider);
        foreach (var claim in externalLoginInfo.Principal.Claims)
        {
            Logger.LogInformation("Claim: {Type} = {Value}", claim.Type, claim.Value);
            
            // Additional check for any claim that might contain picture or image in its type
            if ((claim.Type.Contains("picture", StringComparison.OrdinalIgnoreCase) ||
                 claim.Type.Contains("image", StringComparison.OrdinalIgnoreCase) ||
                 claim.Type.Contains("avatar", StringComparison.OrdinalIgnoreCase) ||
                 claim.Type.Contains("photo", StringComparison.OrdinalIgnoreCase)) &&
                Uri.IsWellFormedUriString(claim.Value, UriKind.Absolute))
            {
                return claim.Value;
            }
        }
        
        // If we couldn't find a picture claim, try to create one from the email (using Gravatar)
        var email = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email);
        if (!string.IsNullOrEmpty(email))
        {
            return $"https://www.gravatar.com/avatar/{ComputeMd5Hash(email.Trim().ToLower())}?d=retro&s=200";
        }
        
        return null;
    }

    private string? GetGoogleUserName()
    {
        // Google provides the name in a standard claim
        var nameClaim = externalLoginInfo.Principal.FindFirst(ClaimTypes.Name) ??
                        externalLoginInfo.Principal.FindFirst("urn:google:name") ??
                        externalLoginInfo.Principal.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name") ??
                        externalLoginInfo.Principal.FindFirst("name") ??
                        externalLoginInfo.Principal.FindFirst("nickname");

        return nameClaim?.Value;
    }

    // Helper method to generate an MD5 hash for Gravatar
    private static string ComputeMd5Hash(string input)
    {
        using (var md5 = System.Security.Cryptography.MD5.Create())
        {
            var inputBytes = System.Text.Encoding.ASCII.GetBytes(input);
            var hashBytes = md5.ComputeHash(inputBytes);
            
            var sb = new System.Text.StringBuilder();
            foreach (var b in hashBytes)
            {
                sb.Append(b.ToString("x2"));
            }
            return sb.ToString();
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";
    }
}