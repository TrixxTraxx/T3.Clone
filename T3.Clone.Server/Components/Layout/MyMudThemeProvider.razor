@rendermode InteractiveServer
@inject ServerSettingsService SettingsService
@using Microsoft.EntityFrameworkCore
@using T3.Clone.Client.Services

<MudThemeProvider Theme="@currentTheme" IsDarkMode="@isDarkMode" />

@code {
    private bool isDarkMode = true;
    private MudTheme currentTheme;

    protected override async Task OnInitializedAsync()
    {
        await UpdateThemeAsync();
    }

    private async Task UpdateThemeAsync()
    {
        try
        {
            isDarkMode = false;
            currentTheme = await GetThemeAsync();

            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine("Error updating theme: " + e.Message);
        }
    }
    
    public async Task<MudTheme> GetThemeAsync()
    {
        var primaryColor = Defaults.PrimaryColor; 
        var secondaryColor = Defaults.SecondaryColor; 
        var backgroundColor = Defaults.BackgroundColor; 
        var surfaceColor = Defaults.SurfaceColor; 
        var textColor = Defaults.TextColor; 
        var secondaryTextColor = Defaults.SecondaryTextColor; 
        var successColor = Defaults.SuccessColor; 
        var errorColor = Defaults.ErrorColor; 
        var warningColor = Defaults.WarningColor; 
        var infoColor = Defaults.InfoColor; 

        // Determine if we should use dark mode based on background brightness
        isDarkMode = IsColorDark(backgroundColor);

        MudTheme MyTheme = new MudTheme
        {
            PaletteDark = new PaletteDark
            {
                Primary = primaryColor,
                Secondary = secondaryColor,
                Background = backgroundColor,
                Surface = surfaceColor,
                DrawerBackground = AdjustColor(backgroundColor, isDarkMode ? 5 : -5),
                DrawerText = textColor,
                AppbarBackground = backgroundColor,
                TextPrimary = textColor,
                TextSecondary = secondaryTextColor,
                ActionDefault = textColor,
                ActionDisabled = isDarkMode ? "rgba(255,255,255, 0.26)" : "rgba(0,0,0, 0.26)",
                ActionDisabledBackground = isDarkMode ? "rgba(255,255,255, 0.12)" : "rgba(0,0,0, 0.12)",
                DrawerIcon = secondaryTextColor,
                TableLines = AdjustColor(backgroundColor, isDarkMode ? 15 : -15),
                Success = successColor,
                Error = errorColor,
                Warning = warningColor,
                Info = infoColor,
                Dark = backgroundColor,
                Tertiary = AdjustColor(primaryColor, 15),
                TertiaryContrastText = textColor,
                GrayDefault = secondaryTextColor,
                GrayLight = AdjustColor(secondaryTextColor, 20),
                GrayLighter = AdjustColor(secondaryTextColor, 40),
                GrayDark = AdjustColor(secondaryTextColor, -20),
                GrayDarker = AdjustColor(secondaryTextColor, -40),
                OverlayDark = AdjustColor(backgroundColor, -20),
                OverlayLight = AdjustColor(backgroundColor, 20)
            },
            PaletteLight = new PaletteLight
            {
                Primary = primaryColor,
                Secondary = secondaryColor,
                Background = backgroundColor,
                Surface = surfaceColor,
                DrawerBackground = AdjustColor(backgroundColor, isDarkMode ? 5 : -5),
                DrawerText = textColor,
                AppbarBackground = backgroundColor,
                TextPrimary = textColor,
                TextSecondary = secondaryTextColor,
                ActionDefault = textColor,
                ActionDisabled = isDarkMode ? "rgba(255,255,255, 0.26)" : "rgba(0,0,0, 0.26)",
                ActionDisabledBackground = isDarkMode ? "rgba(255,255,255, 0.12)" : "rgba(0,0,0, 0.12)",
                DrawerIcon = secondaryTextColor,
                TableLines = AdjustColor(backgroundColor, isDarkMode ? 15 : -15),
                Success = successColor,
                Error = errorColor,
                Warning = warningColor,
                Info = infoColor,
                Dark = backgroundColor,
                Tertiary = AdjustColor(primaryColor, 15),
                TertiaryContrastText = textColor,
                GrayDefault = secondaryTextColor,
                GrayLight = AdjustColor(secondaryTextColor, 20),
                GrayLighter = AdjustColor(secondaryTextColor, 40),
                GrayDark = AdjustColor(secondaryTextColor, -20),
                GrayDarker = AdjustColor(secondaryTextColor, -40),
                OverlayDark = AdjustColor(backgroundColor, -20),
                OverlayLight = AdjustColor(backgroundColor, 20)
            },
            LayoutProperties = new LayoutProperties
            {
                DefaultBorderRadius = "12px",
                DrawerWidthLeft = "250px",
                DrawerWidthRight = "250px",
                AppbarHeight = "0px"
            }
        };
        return MyTheme;
    }
    
    private bool IsColorDark(string hexColor)
    {
        if (!hexColor.StartsWith("#") || hexColor.Length < 7)
            return true; // Default to dark if invalid color
            
        // Parse RGB values
        int r = Convert.ToInt32(hexColor.Substring(1, 2), 16);
        int g = Convert.ToInt32(hexColor.Substring(3, 2), 16);
        int b = Convert.ToInt32(hexColor.Substring(5, 2), 16);
        
        // Calculate relative luminance
        double luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255;
        
        return luminance < 0.5; // Dark if luminance is less than 50%
    }
    
    private string AdjustColor(string hexColor, int percentage)
    {
        if (!hexColor.StartsWith("#") || (hexColor.Length != 7 && hexColor.Length != 9))
            return hexColor;
            
        // Remove # and handle both RGB and RGBA
        var hex = hexColor.Substring(1);
        
        // Parse the hex values
        int r = Convert.ToInt32(hex.Substring(0, 2), 16);
        int g = Convert.ToInt32(hex.Substring(2, 2), 16);
        int b = Convert.ToInt32(hex.Substring(4, 2), 16);
        
        // Adjust the colors (lighten for positive percentage, darken for negative)
        if (percentage > 0)
        {
            r = Math.Min(255, r + (percentage * (255 - r) / 100));
            g = Math.Min(255, g + (percentage * (255 - g) / 100));
            b = Math.Min(255, b + (percentage * (255 - b) / 100));
        }
        else
        {
            var absPercentage = Math.Abs(percentage);
            r = Math.Max(0, r - (absPercentage * r / 100));
            g = Math.Max(0, g - (absPercentage * g / 100));
            b = Math.Max(0, b - (absPercentage * b / 100));
        }
        
        // Convert back to hex
        return $"#{r:X2}{g:X2}{b:X2}";
    }
    
    // Default theme settings - should match SettingsService.Defaults
    public static class Defaults
    {
        public const string PrimaryColor = "#6366f1"; // Primary color
        public const string SecondaryColor = "#7c3aed"; // Secondary color
        public const string BackgroundColor = "#070d22"; // Background
        public const string SurfaceColor = "#111936"; // Surface color
        public const string TextColor = "#FFFFFF"; // White text
        public const string SecondaryTextColor = "#B0B0B0"; // Light gray text
        public const string SuccessColor = "#10b981"; // Success color
        public const string ErrorColor = "#ef4444"; // Error color
        public const string WarningColor = "#f59e0b"; // Warning color
        public const string InfoColor = "#3b82f6"; // Info color
    }
}