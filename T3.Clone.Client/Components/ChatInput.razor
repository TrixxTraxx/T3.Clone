@using T3.Clone.Client.Models
@using T3.Clone.Dtos.Messages
@using T3.Clone.Dtos.Model
@inject IJSRuntime JSRuntime
@inject AiModelService AiModelService

<div class="hypermodern-chat-input-wrapper">
    <div class="hypermodern-input-container">
        <div class="input-field-wrapper">
            <div class="textarea-wrapper">
                <textarea @bind="message.Text" 
                         @bind:event="oninput"
                         @onkeydown="HandleKeyDown"
                         placeholder="Type your message..." 
                         disabled="@IsLoading"
                         class="hypermodern-textarea"
                         rows="1"
                         @ref="textareaRef"></textarea>
            </div>
            
            <div class="send-button-wrapper">
                <button class="hypermodern-send-btn @(CanSend ? "enabled" : "disabled")"
                        @onclick="SendMessage"
                        disabled="@(!CanSend)"
                        type="button">
                    <div class="btn-content">
                        @if (IsLoading)
                        {
                            <div class="loading-spinner"></div>
                        }
                        else
                        {
                            <svg class="send-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M2 21L23 12L2 3V10L17 12L2 14V21Z" fill="currentColor"/>
                            </svg>
                        }
                    </div>
                </button>
            </div>
        </div>

        <!-- Control Row -->
        <div class="control-row">
            <!-- Toggle Buttons and Model Selector -->
            <div class="control-group">
                <div class="toggle-buttons">
                    <!-- AI Model Selector -->
                    <div class="model-selector-wrapper">
                        <select @bind="SelectedModelId" class="hypermodern-model-select" disabled="@IsLoading">
                            @foreach (var model in aiModels)
                            {
                                <option value="@model.Id" selected="@(_selectedModelId == model.Id)">
                                    @model.Name
                                </option>
                            }
                        </select>
                    </div>
                    
                    <button class="hypermodern-toggle-btn @(enableThinking ? "active" : "")"
                            @onclick="ToggleThinking"
                            disabled="@IsLoading"
                            type="button">
                        <svg class="toggle-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z" fill="currentColor"/>
                        </svg>
                        <span>Thinking</span>
                    </button>

                    <button class="hypermodern-toggle-btn @(enableAttachments ? "active" : "")"
                            @onclick="ToggleAttachments"
                            disabled="@IsLoading"
                            type="button">
                        <svg class="toggle-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M16.5 6V17.5C16.5 19.71 14.71 21.5 12.5 21.5S8.5 19.71 8.5 17.5V5C8.5 3.62 9.62 2.5 11 2.5S13.5 3.62 13.5 5V15.5C13.5 16.05 13.05 16.5 12.5 16.5S11.5 16.05 11.5 15.5V6H10V15.5C10 16.88 11.12 18 12.5 18S15 16.88 15 15.5V5C15 2.79 13.21 1 11 1S7 2.79 7 5V17.5C7 20.54 9.46 23 12.5 23S18 20.54 18 17.5V6H16.5Z" fill="currentColor"/>
                        </svg>
                        <span>Attachments</span>
                    </button>
                </div>
            </div>
        </div>
        
        @if (IsLoading)
        {
            <div class="loading-indicator">
                <div class="loading-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
                <span class="loading-text">Sending message...</span>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public EventCallback<MessageDto> OnSendMessage { get; set; }
    [Parameter] public EventCallback<ChatAttachment> OnAttachmentAdded { get; set; }
    [Parameter] public bool IsLoading { get; set; }
    
    private List<AiModelDto> aiModels = new List<AiModelDto>();

    private MessageDto message = new MessageDto();
    private ElementReference textareaRef;
    private int _selectedModelId = 1;
    private bool enableThinking = false;
    private bool enableAttachments = false;
    
    public int SelectedModelId
    {
        get => _selectedModelId;
        set
        {
            if (_selectedModelId != value)
            {
                _selectedModelId = value;
            }
        }
    }
    
    private bool CanSend => !IsLoading && !string.IsNullOrWhiteSpace(message.Text);

    protected override async Task OnInitializedAsync()
    {
        aiModels = await AiModelService.GetAiModels();
        _selectedModelId = aiModels.FirstOrDefault()?.Id ?? 1; // Default to first model if available
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey && !e.CtrlKey)
        {
            await JSRuntime.InvokeVoidAsync("eval", "event.preventDefault()");
            await SendMessage();
        }
        
        // Handle auto-resize on input
        await JSRuntime.InvokeVoidAsync("autoResizeTextarea", textareaRef);
    }

    private async Task SendMessage()
    {
        if (!CanSend) return;
        
        // Set the selected model ID on the message
        message.ModelId = _selectedModelId;
        
        IsLoading = true;
        StateHasChanged();
        
        await OnSendMessage.InvokeAsync(message);
        
        message = new MessageDto(); // Reset message after sending
        
        // Reset textarea height immediately
        await JSRuntime.InvokeVoidAsync("resetTextareaHeight", textareaRef);
        StateHasChanged();
        
        IsLoading = false;
    }

    private void ToggleThinking()
    {
        enableThinking = !enableThinking;
        Console.WriteLine($"Thinking mode: {enableThinking}");
    }

    private void ToggleAttachments()
    {
        enableAttachments = !enableAttachments;
        Console.WriteLine($"Attachments enabled: {enableAttachments}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize auto-resize functionality
            await JSRuntime.InvokeVoidAsync("initializeTextareaAutoResize", textareaRef);
        }
    }
} 