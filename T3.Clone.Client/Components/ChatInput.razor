@using T3.Clone.Dtos.Model
@inject IJSRuntime JSRuntime
@inject AiModelService AiModelService
@inject AttachmentService AttachmentService

<script>
    window.focusElement = function (element) {
        if (element) {
            element.focus();
        }
    };

    window.setupTabVisibilityFocus = function (element) {
        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'visible' && element) {
                setTimeout(() => element.focus(), 100); // slight delay for safety
            }
        });
    };
</script>

<div class="hypermodern-chat-input-wrapper">
    <div class="hypermodern-input-container">
        @if (uploadedAttachments.Any())
        {
            <div class="attachments-section">
                <div class="uploaded-attachments">
                    @foreach (var attachment in uploadedAttachments)
                    {
                        <div class="uploaded-attachment" key="@attachment.Id">
                            <div class="attachment-info">
                                <div class="attachment-icon">
                                    @if (IsImageAttachment(attachment.ContentType))
                                    {
                                        <svg viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M21 19V5C21 3.9 20.1 3 19 3H5C3.9 3 3 3.9 3 5V19C3 20.1 3.9 21 5 21H19C20.1 21 19 20.1 19 19ZM8.5 13.5L11 16.51L14.5 12L19 18H5L8.5 13.5Z"/>
                                        </svg>
                                    }
                                    else
                                    {
                                        <svg viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M16.5 6V17.5C16.5 19.71 14.71 21.5 12.5 21.5S8.5 19.71 8.5 17.5V5C8.5 3.62 9.62 2.5 11 2.5S13.5 3.62 13.5 5V15.5C13.5 16.05 13.05 16.5 12.5 16.5S11.5 16.05 11.5 15.5V6H10V15.5C10 16.88 11.12 18 12.5 18S15 16.88 15 15.5V5C15 2.79 13.21 1 11 1S7 2.79 7 5V17.5C7 20.54 9.46 23 12.5 23S18 20.54 18 17.5V6H16.5Z"/>
                                        </svg>
                                    }
                                </div>
                                <div class="attachment-details">
                                    <span class="attachment-name">@attachment.FileName</span>
                                    <span class="attachment-meta">@attachment.ContentType</span>
                                </div>
                            </div>
                            <button class="remove-attachment" @onclick="() => RemoveAttachment(attachment)" type="button">
                                <svg viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z"/>
                                </svg>
                            </button>
                        </div>
                    }
                </div>
            </div>
        }
        
        @if (isUploading && pendingUploads > 0)
        {
            <div class="upload-progress">
                <div class="upload-info">
                    <svg class="upload-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                    </svg>
                    <span>Uploading @pendingUploads file(s)...</span>
                </div>
                <div class="upload-spinner">
                    <div class="spinner"></div>
                </div>
            </div>
        }
        
        <div class="input-field-wrapper">
            <div class="textarea-wrapper">
                <textarea @bind="message.Text" 
                         @bind:event="oninput"
                         @onkeydown="HandleKeyDown"
                         placeholder="Type your message..." 
                         disabled="@IsLoading"
                         class="hypermodern-textarea"
                         rows="1"
                         @ref="textareaRef"></textarea>
            </div>
            
            <div class="send-button-wrapper">
                <button class="hypermodern-send-btn @(CanSend ? "enabled" : "disabled")"
                        @onclick="SendMessage"
                        disabled="@(!CanSend)"
                        type="button">
                    <div class="btn-content">
                        @if (IsLoading)
                        {
                            <div class="loading-spinner"></div>
                        }
                        else
                        {
                            <svg class="send-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M2 21L23 12L2 3V10L17 12L2 14V21Z" fill="currentColor"/>
                            </svg>
                        }
                    </div>
                </button>
            </div>
        </div>

        <!-- Control Row -->
        <div class="control-row">
            <!-- Toggle Buttons and Model Selector -->
            <div class="control-group">
                <div class="toggle-buttons">
                    <!-- AI Model Selector Button -->
                    <div class="model-selector-wrapper">
                        <button class="hypermodern-model-btn @(showModelModal ? "active" : "")"
                                @onclick="OpenModelModal"
                                disabled="@IsLoading"
                                type="button">
                            <div class="model-btn-content">
                                <svg class="model-icon" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z"/>
                                </svg>
                                <span class="model-name">@GetSelectedModelName()</span>
                                <svg class="dropdown-icon" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M7 10L12 15L17 10H7Z"/>
                                </svg>
                            </div>
                        </button>
                    </div>
                    
                    @if (SelectedModelSupportsThinking())
                    {
                        <button class="hypermodern-toggle-btn @(enableThinking ? "active" : "")"
                                @onclick="ToggleThinking"
                                disabled="@IsLoading"
                                type="button">
                            <svg class="toggle-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z" fill="currentColor"/>
                            </svg>
                            <span>Thinking</span>
                        </button>
                    }

                    @if (SelectedModelSupportsFiles())
                    {
                        <button class="hypermodern-toggle-btn @(uploadedAttachments.Any() ? "active" : "")"
                                @onclick="SelectAttachments"
                                disabled="@IsLoading"
                                type="button">
                            <svg class="toggle-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M16.5 6V17.5C16.5 19.71 14.71 21.5 12.5 21.5S8.5 19.71 8.5 17.5V5C8.5 3.62 9.62 2.5 11 2.5S13.5 3.62 13.5 5V15.5C13.5 16.05 13.05 16.5 12.5 16.5S11.5 16.05 11.5 15.5V6H10V15.5C10 16.88 11.12 18 12.5 18S15 16.88 15 15.5V5C15 2.79 13.21 1 11 1S7 2.79 7 5V17.5C7 20.54 9.46 23 12.5 23S18 20.54 18 17.5V6H16.5Z" fill="currentColor"/>
                            </svg>
                            <span>Attachments</span>
                        </button>
                    }
                </div>
            </div>
        </div>
        
        @if (IsLoading)
        {
            <div class="loading-indicator">
                <div class="loading-dots">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
                <span class="loading-text">Sending message...</span>
            </div>
        }
    </div>
</div>

<!-- Hidden file input -->
<div class="hiddenFileInput">
    <InputFile id="hiddenFileInput" OnChange="HandleFileSelected" multiple disabled="@IsLoading" class="hidden-file-input" accept="*/*" />
</div>

<!-- Model Selection Modal -->
<ModelSelectionModal 
    IsVisible="showModelModal"
    Models="aiModels"
    SelectedModelId="SelectedModelId"
    OnModelSelected="OnModelSelected"
    OnClose="CloseModelModal" />

@code {
    [Parameter] public EventCallback<MessageDto> OnSendMessage { get; set; }
    [Parameter] public EventCallback<ChatAttachment> OnAttachmentAdded { get; set; }
    [Parameter] public bool IsLoading { get; set; }
    
    private List<AiModelDto> aiModels = new List<AiModelDto>();
    private List<AttachmentDto> uploadedAttachments = new List<AttachmentDto>();
    private bool isUploading = false;
    private int pendingUploads = 0;
    private bool showModelModal = false;

    private MessageDto message = new MessageDto();
    private ElementReference textareaRef;
    private int _selectedModelId = 1;
    private bool enableThinking = false;
    
    public int SelectedModelId
    {
        get => _selectedModelId;
        set
        {
            if (_selectedModelId != value)
            {
                _selectedModelId = value;
                // Reset thinking if new model doesn't support it
                if (!SelectedModelSupportsThinking())
                {
                    enableThinking = false;
                }
            }
        }
    }
    
    private bool CanSend => !IsLoading && (!string.IsNullOrWhiteSpace(message.Text) || uploadedAttachments.Any());

    protected override async Task OnInitializedAsync()
    {
        aiModels = await AiModelService.GetAiModels();
        
        // Find default model or use first available
        var defaultModel = aiModels.FirstOrDefault(m => m.IsDefault) ?? aiModels.FirstOrDefault();
        if (defaultModel != null)
        {
            _selectedModelId = defaultModel.Id;
        }
        
        StateHasChanged();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey && !e.CtrlKey)
        {
            await JSRuntime.InvokeVoidAsync("eval", "event.preventDefault()");
            await SendMessage();
        }
        
        // Handle auto-resize on input
        await JSRuntime.InvokeVoidAsync("autoResizeTextarea", textareaRef);
    }

    private async Task SelectAttachments()
    {
        // Trigger the hidden file input
        var currentModel = aiModels.FirstOrDefault(m => m.Id == _selectedModelId);
        await JSRuntime.InvokeVoidAsync("triggerFileInput", currentModel!.SupportedContentTypes);
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles(10); // Limit to 10 files
        
        if (!files.Any()) return;
        
        isUploading = true;
        pendingUploads = files.Count();
        StateHasChanged();
        
        foreach (var file in files)
        {
            try
            {
                // Check file size (1MB limit)
                if (file.Size > 1024 * 1024)
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"File {file.Name} is too large. Maximum size is 1MB.");
                    pendingUploads--;
                    continue;
                }
                
                // Check if file already exists
                if (uploadedAttachments.Any(a => a.FileName == file.Name))
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"File {file.Name} is already uploaded.");
                    pendingUploads--;
                    continue;
                }

                // Check if current model supports the file type for images
                if (IsImageAttachment(file.ContentType) && !SelectedModelSupportsImages())
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"The selected model '{GetSelectedModelName()}' does not support image files. Please select a different model or remove the image.");
                    pendingUploads--;
                    continue;
                }

                // Additional validation: Check if file type is in supported content types
                if (!IsFileTypeSupported(file.ContentType))
                {
                    await JSRuntime.InvokeVoidAsync("alert", $"File type '{file.ContentType}' is not supported by the selected model '{GetSelectedModelName()}'.");
                    pendingUploads--;
                    continue;
                }
                
                // Upload immediately
                var attachment = await AttachmentService.UploadAttachment(file);
                if (attachment != null)
                {
                    uploadedAttachments.Add(attachment);
                }
                
                pendingUploads--;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error uploading file {file.Name}: {ex.Message}");
                pendingUploads--;
            }
        }
        
        isUploading = false;
        StateHasChanged();
    }

    private void RemoveAttachment(AttachmentDto attachment)
    {
        uploadedAttachments.Remove(attachment);
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (!CanSend) return;
        
        // Set the selected model ID on the message
        message.ModelId = _selectedModelId;
        
        // Add attachment IDs to message
        message.AttachmentIds = uploadedAttachments.Select(a => a.Id).ToList();
        
        IsLoading = true;
        StateHasChanged();
        
        try
        {
            await OnSendMessage.InvokeAsync(message);
            
            // Reset form
            message = new MessageDto();
            uploadedAttachments.Clear();
            
            // Reset textarea height immediately
            await JSRuntime.InvokeVoidAsync("resetTextareaHeight", textareaRef);
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private void ToggleThinking()
    {
        if (SelectedModelSupportsThinking())
        {
            enableThinking = !enableThinking;
            Console.WriteLine($"Thinking mode: {enableThinking}");
        }
    }

    private void OpenModelModal()
    {
        showModelModal = true;
        StateHasChanged();
    }

    private void CloseModelModal()
    {
        showModelModal = false;
        StateHasChanged();
    }

    private void OnModelSelected(int modelId)
    {
        SelectedModelId = modelId;
        StateHasChanged();
    }

    private string GetSelectedModelName()
    {
        if (!aiModels.Any())
        {
            return "Loading...";
        }
        
        var model = aiModels.FirstOrDefault(m => m.Id == _selectedModelId);
        return model?.Name ?? "Select Model";
    }

    private bool SelectedModelSupportsThinking()
    {
        var model = aiModels.FirstOrDefault(m => m.Id == _selectedModelId);
        return model?.HasThinkingSupport == true;
    }

    private bool SelectedModelSupportsImages()
    {
        var model = aiModels.FirstOrDefault(m => m.Id == _selectedModelId);
        return model?.HasImageSupport == true;
    }

    private bool SelectedModelSupportsFiles()
    {
        var model = aiModels.FirstOrDefault(m => m.Id == _selectedModelId);
        return model?.HasImageSupport == true;
    }

    private bool IsImageAttachment(string contentType)
    {
        return contentType.StartsWith("image/", StringComparison.OrdinalIgnoreCase);
    }

    private bool IsFileTypeSupported(string contentType)
    {
        var model = aiModels.FirstOrDefault(m => m.Id == _selectedModelId);
        if (model == null || string.IsNullOrEmpty(model.SupportedContentTypes))
        {
            // If no supported content types are defined, allow all file types
            return true;
        }

        // Parse supported content types (assuming comma-separated list)
        var supportedTypes = model.SupportedContentTypes.Split(',', StringSplitOptions.RemoveEmptyEntries)
            .Select(t => t.Trim().ToLowerInvariant())
            .ToList();

        // Check if content type matches any of the supported types
        var normalizedContentType = contentType.ToLowerInvariant();
        
        return supportedTypes.Any(supportedType =>
        {
            // Support wildcard patterns like "image/*" or exact matches
            if (supportedType.EndsWith("/*"))
            {
                var prefix = supportedType.Substring(0, supportedType.Length - 2);
                return normalizedContentType.StartsWith(prefix + "/");
            }
            return normalizedContentType == supportedType;
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeTextareaAutoResize", textareaRef);
            await JSRuntime.InvokeVoidAsync("focusElement", textareaRef);
            await JSRuntime.InvokeVoidAsync("setupTabVisibilityFocus", textareaRef);
        }
    }

} 