@inject IJSRuntime JSRuntime

<div class="model-modal-overlay @(IsVisible ? "visible" : "")" @onclick="@(() => CloseModal())" @onkeydown="@HandleKeyDown" tabindex="-1">
    <div class="model-modal-container" @onclick:stopPropagation="true">
        <div class="model-modal-header">
            <h3 class="modal-title">Select AI Model</h3>
            <button class="modal-close-btn" @onclick="CloseModal" type="button">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z"/>
                </svg>
            </button>
        </div>
        
        <div class="model-modal-content">
            @if (Models?.Any() == true)
            {
                <div class="models-list">
                    @foreach (var model in Models)
                    {
                        <div class="model-card @(model.Id == SelectedModelId ? "selected" : "")" 
                             @onclick="() => SelectModel(model.Id)"
                             @onkeydown="@((e) => HandleModelKeyDown(e, model.Id))"
                             tabindex="0">
                            <div class="model-main-info">
                                <div class="model-header">
                                    <h4 class="model-name">@model.Name</h4>
                                    @if (model.IsDefault)
                                    {
                                        <span class="default-badge">Default</span>
                                    }
                                </div>
                                @if (!string.IsNullOrWhiteSpace(model.Description))
                                {
                                    <p class="model-description">@model.Description</p>
                                }
                            </div>
                            
                            <div class="model-capabilities">
                                @if (model.HasImageSupport)
                                {
                                    <div class="capability-badge image">
                                        <svg viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M21 19V5C21 3.9 20.1 3 19 3H5C3.9 3 3 3.9 3 5V19C3 20.1 3.9 21 5 21H19C20.1 21 19 20.1 19 19ZM8.5 13.5L11 16.51L14.5 12L19 18H5L8.5 13.5Z"/>
                                        </svg>
                                        <span>Images</span>
                                    </div>
                                }
                                
                                @if (model.HasThinkingSupport)
                                {
                                    <div class="capability-badge thinking">
                                        <svg viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z"/>
                                        </svg>
                                        <span>Thinking</span>
                                    </div>
                                }
                                
                                @if (model.HasImageGenerationSupport)
                                {
                                    <div class="capability-badge generation">
                                        <svg viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L19 5L17 7V9C16.45 9 16 9.45 16 10V16C16 16.55 16.45 17 17 17H19C19.55 17 20 16.55 20 16V10C20 9.45 19.55 9 19 9ZM7 9V7L5 5L3 7V9C2.45 9 2 9.45 2 10V16C2 16.55 2.45 17 3 17H5C5.55 17 6 16.55 6 16V10C6 9.45 5.55 9 5 9ZM14 18C14 19.1 13.1 20 12 20C10.9 20 10 19.1 10 20C10 21.1 10.9 22 12 22C13.1 22 14 21.1 14 20Z"/>
                                        </svg>
                                        <span>Generation</span>
                                    </div>
                                }
                            </div>
                            
                            @if (model.MaxInputTokens > 0 || model.MaxOutputTokens > 0)
                            {
                                <div class="model-limits">
                                    @if (model.MaxInputTokens > 0)
                                    {
                                        <div class="limit-info">
                                            <span class="limit-label">Input:</span>
                                            <span class="limit-value">@FormatTokenCount(model.MaxInputTokens)</span>
                                        </div>
                                    }
                                    @if (model.MaxOutputTokens > 0)
                                    {
                                        <div class="limit-info">
                                            <span class="limit-label">Output:</span>
                                            <span class="limit-value">@FormatTokenCount(model.MaxOutputTokens)</span>
                                        </div>
                                    }
                                </div>
                            }
                            
                            @if (model.Id == SelectedModelId)
                            {
                                <div class="selection-indicator">
                                    <svg viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                                    </svg>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-models">
                    <p>No AI models available</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public List<AiModelDto>? Models { get; set; }
    [Parameter] public int SelectedModelId { get; set; }
    [Parameter] public EventCallback<int> OnModelSelected { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    
    private async Task SelectModel(int modelId)
    {
        await OnModelSelected.InvokeAsync(modelId);
        await CloseModal();
    }
    
    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }
    
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            await CloseModal();
        }
    }
    
    private async Task HandleModelKeyDown(KeyboardEventArgs e, int modelId)
    {
        if (e.Key == "Enter" || e.Key == " ")
        {
            await SelectModel(modelId);
        }
    }
    
    private string FormatTokenCount(int tokens)
    {
        if (tokens >= 1000000)
        {
            return $"{tokens / 1000000.0:F1}M";
        }
        if (tokens >= 1000)
        {
            return $"{tokens / 1000.0:F0}K";
        }
        return tokens.ToString();
    }
} 