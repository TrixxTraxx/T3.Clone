@inject ImageModalService ModalService

@if (isOpen)
{
    <div class="image-modal-backdrop" @onclick="CloseModal">
        <div class="image-modal-content"
             tabindex="0"
             @onclick:stopPropagation
             @onwheel="OnWheel"
             @onmousedown="OnMouseDown"
             @onmouseup="OnMouseUp"
             @onmousemove="OnMouseMove"
             @onkeydown="OnKeyDown">
            <img src="@imageUrl"
                 style="max-width:@(zoom * 90)vw; max-height:@(zoom * 80)vh; border-radius:8px; box-shadow: 0 2px 20px rgba(0,0,0,0.5); transform: translate(@offsetX px, @offsetY px); cursor: @(dragging ? "grabbing" : "grab");"
                 @onmousedown="OnStartDrag"
                 draggable="false"
                 alt="Expanded image"/>
            <button class="close-modal-btn" @onclick="CloseModal" title="Close" type="button">&#10005;</button>
            <div class="zoom-controls">
                <button @onclick="() => SetZoom(zoom + 0.1)">+</button>
                <button @onclick="() => SetZoom(1.0)">Reset</button>
                <button @onclick="() => SetZoom(zoom - 0.1)">-</button>
            </div>
        </div>
    </div>
}

@code {
    private bool isOpen = false;
    private string? imageUrl;
    private double zoom = 1.0;
    private double offsetX = 0, offsetY = 0;
    private double dragStartX, dragStartY, lastOffsetX, lastOffsetY;
    private bool dragging = false;

    protected override void OnInitialized()
    {
        ModalService.OnShow += Show;
        ModalService.OnHide += Hide;
    }

    private void Show(string url)
    {
        imageUrl = url;
        isOpen = true;
        zoom = 1.0;
        offsetX = offsetY = 0;
        StateHasChanged();
    }

    private void Hide()
    {
        isOpen = false;
        StateHasChanged();
    }

    private void CloseModal()
    {
        ModalService.Hide();
    }

    private void SetZoom(double value)
    {
        zoom = Math.Max(0.5, Math.Min(value, 3.0));
    }

    private void OnWheel(WheelEventArgs e)
    {
        if (e.DeltaY < 0)
            SetZoom(zoom + 0.1);
        else
            SetZoom(zoom - 0.1);
    }

    private void OnStartDrag(MouseEventArgs e)
    {
        dragging = true;
        dragStartX = e.ClientX;
        dragStartY = e.ClientY;
        lastOffsetX = offsetX;
        lastOffsetY = offsetY;
    }
    private void OnMouseDown(MouseEventArgs e) { }
    private void OnMouseUp(MouseEventArgs e)
    {
        dragging = false;
    }
    private void OnMouseMove(MouseEventArgs e)
    {
        if (dragging)
        {
            offsetX = lastOffsetX + (e.ClientX - dragStartX);
            offsetY = lastOffsetY + (e.ClientY - dragStartY);
            StateHasChanged();
        }
    }

    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
            CloseModal();
    }
}
