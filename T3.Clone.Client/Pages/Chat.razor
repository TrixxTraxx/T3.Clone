@page "/"
@page "/chat"
@page "/chat/{ThreadId:int}"
@using T3.Clone.Client.Caches
@using T3.Clone.Dtos.Messages
@using T3.Clone.Client.Models
@inject MessageSyncService MessageSyncService
@inject ISnackbar Snackbar

<PageTitle>T3.Clone - AI Chat Assistant</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="chat-page-container">
    <div class="chat-container">
        <div class="chat-messages-container">
            @if (currentBranch.Any())
            {
                @foreach (var message in currentBranch)
                {
                    <ChatMessage 
                        Message="message" 
                        MessageTree="messageTree" 
                        OnRegenerateMessage="RegenerateMessage" 
                    />
                }
            }
            else if (isLoading)
            {
                <div class="loading-container">
                    <MudProgressCircular Indeterminate="true" Size="Size.Medium" />
                    <MudText Typo="Typo.h6" Class="mt-4">Loading conversation...</MudText>
                </div>
            }
            else
            {
                <div class="welcome-container">
                    <MudIcon Icon="Icons.Material.Filled.Chat" Size="Size.Large" Color="Color.Primary" Class="welcome-icon" />
                    <MudText Typo="Typo.h4" Class="welcome-text">Start a new conversation</MudText>
                    <MudText Typo="Typo.body1" Color="Color.Secondary">Ask me anything, and I'll help you!</MudText>
                </div>
            }
        </div>
        
        <ChatInput 
            OnSendMessage="HandleSendMessage" 
            OnAttachmentAdded="HandleAttachment"
            IsLoading="isSending" 
        />
    </div>
</MudContainer>

@code {
    [Parameter]
    public int? ThreadId { get; set; }

    private MessageTreeDto? messageTree;
    private bool isLoading = false;
    private bool isSending = false;
    
    //the down most message of the current Branch
    private int currentBranchPath;
    private List<MessageCache> currentBranch = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadChat();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadChat();
    }

    private async Task LoadChat()
    {
        if (ThreadId.HasValue)
        {
            isLoading = true;
            StateHasChanged();

            try
            {
                messageTree = await MessageSyncService.GetMessageTree(ThreadId.Value);
                InitializeBranchPath();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading chat: {ex.Message}");
                messageTree = null;
            }

            isLoading = false;
            StateHasChanged();
        }
        else
        {
            messageTree = null;
            currentBranchPath = 0;
        }
    }

    private void InitializeBranchPath()
    {
        if (messageTree == null) return;

        currentBranchPath = messageTree.StartMessageId;
        
        // Build the path from start to end
        currentBranch = messageTree.GetMessagesForBranch(currentBranchPath);
    }

    private async Task HandleSendMessage(MessageDto message)
    {
        if (string.IsNullOrWhiteSpace(message.Text)) return;

        isSending = true;
        StateHasChanged();

        try
        {
            // Add user message to display
            var messageCache = new MessageCache
            {
                Message = message
            };
            currentBranch.Insert(0, messageCache);
            StateHasChanged();

            var result = await MessageSyncService.SendMessage(messageCache.Message);
            messageCache.Message = result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending message: {ex.Message}");
        }

        isSending = false;
        StateHasChanged();
    }

    private void HandleAttachment(ChatAttachment attachment)
    {
        // Handle attachment processing
        Console.WriteLine($"Attachment added: {attachment.Name}");
    }

    private async Task RegenerateMessage(int messageId)
    {
        // TODO: Implement message regeneration
        Console.WriteLine($"Regenerating message: {messageId}");
    }
} 