@page "/"
@page "/chat"

<PageTitle>T3.Clone - AI Chat Assistant</PageTitle>

<div class="chat-container">
    @if (messages.Count == 0)
    {
        <div class="welcome-section">
            <div class="welcome-card">
                <h1 class="welcome-title">Welcome to T3.Clone</h1>
                <p class="welcome-subtitle">
                    Your intelligent AI assistant for the Cloneathon. Experience the power of conversational AI 
                    with a modern, intuitive interface designed for productivity and creativity.
                </p>
                
                <div class="starter-prompts">
                    <div class="starter-grid">
                        <div class="starter-card" @onclick="@(() => SendMessage(codeHelperPrompt))">
                            <div class="starter-header">
                                <span class="starter-icon">ðŸ’»</span>
                                <h3>Code Helper</h3>
                            </div>
                            <p class="starter-description">Help me write a function in C#</p>
                        </div>
                        
                        <div class="starter-card" @onclick="@(() => SendMessage(explainTechPrompt))">
                            <div class="starter-header">
                                <span class="starter-icon">ðŸ§ </span>
                                <h3>Explain Tech</h3>
                            </div>
                            <p class="starter-description">How does Blazor WebAssembly work?</p>
                        </div>
                        
                        <div class="starter-card" @onclick="@(() => SendMessage(codeReviewPrompt))">
                            <div class="starter-header">
                                <span class="starter-icon">ðŸ“‹</span>
                                <h3>Code Review</h3>
                            </div>
                            <p class="starter-description">Review my code for best practices</p>
                        </div>
                        
                        <div class="starter-card" @onclick="@(() => SendMessage(brainstormPrompt))">
                            <div class="starter-header">
                                <span class="starter-icon">ðŸ’¡</span>
                                <h3>Brainstorm</h3>
                            </div>
                            <p class="starter-description">Help me brainstorm project ideas</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="messages-container">
            @foreach (var message in messages)
            {
                <div class="message-wrapper @(message.IsUser ? "user-message" : "ai-message")">
                    <div class="message-content">
                        <div class="message-avatar @(message.IsUser ? "user-avatar" : "ai-avatar")">
                            @(message.IsUser ? "ðŸ‘¤" : "ðŸ¤–")
                        </div>
                        <div class="message-bubble">
                            <p class="message-text">@message.Content</p>
                            <span class="message-time">@message.Timestamp.ToString("HH:mm")</span>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<div class="chat-input-area">
    <div class="input-container">
        <div class="input-wrapper">
            <input type="text" 
                   @bind="currentMessage"
                   @onkeydown="HandleKeyPress"
                   placeholder="Type your message here... (Press Enter to send)"
                   class="chat-input" />
            <button class="send-btn" @onclick="() => SendMessage(currentMessage)" 
                    disabled="@(string.IsNullOrWhiteSpace(currentMessage))">
                ðŸ“¤
            </button>
        </div>
        <p class="input-hint">T3.Clone can make mistakes. Consider checking important information.</p>
    </div>
</div>

<style>
    .chat-container {
        height: calc(100vh - 140px);
        overflow-y: auto;
        padding: 2rem 1rem;
    }

    .welcome-section {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 60vh;
    }

    .welcome-card {
        background: #1e293b;
        border: 1px solid #334155;
        border-radius: 12px;
        padding: 3rem;
        text-align: center;
        max-width: 900px;
        width: 100%;
    }

    .welcome-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0 0 1rem 0;
        background: linear-gradient(135deg, #3b82f6, #6366f1);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .welcome-subtitle {
        color: #cbd5e1;
        line-height: 1.6;
        margin-bottom: 2rem;
        font-size: 1.125rem;
    }

    .starter-prompts {
        margin-top: 2rem;
    }

    .starter-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-top: 2rem;
    }

    .starter-card {
        background: #0f172a;
        border: 1px solid #334155;
        border-radius: 8px;
        padding: 1.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: left;
    }

    .starter-card:hover {
        border-color: #3b82f6;
        transform: translateY(-4px);
        box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
    }

    .starter-header {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin-bottom: 0.75rem;
    }

    .starter-icon {
        font-size: 1.25rem;
    }

    .starter-header h3 {
        margin: 0;
        font-size: 1.125rem;
        font-weight: 600;
        color: #e2e8f0;
    }

    .starter-description {
        color: #94a3b8;
        margin: 0;
        font-size: 0.875rem;
    }

    .messages-container {
        padding: 1rem 0;
    }

    .message-wrapper {
        margin-bottom: 1.5rem;
        display: flex;
    }

    .user-message {
        justify-content: flex-end;
    }

    .ai-message {
        justify-content: flex-start;
    }

    .message-content {
        display: flex;
        align-items: flex-start;
        gap: 0.75rem;
        max-width: 70%;
    }

    .user-message .message-content {
        flex-direction: row-reverse;
    }

    .message-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
        flex-shrink: 0;
    }

    .user-avatar {
        background: linear-gradient(135deg, #3b82f6, #6366f1);
    }

    .ai-avatar {
        background: #334155;
    }

    .message-bubble {
        background: #1e293b;
        border: 1px solid #334155;
        padding: 1rem;
        border-radius: 1rem;
        flex: 1;
    }

    .user-message .message-bubble {
        background: linear-gradient(135deg, #3b82f6, #6366f1);
        border-color: #4f46e5;
    }

    .message-text {
        margin: 0 0 0.5rem 0;
        color: #e2e8f0;
        line-height: 1.5;
    }

    .user-message .message-text {
        color: white;
    }

    .message-time {
        font-size: 0.75rem;
        color: #64748b;
        display: block;
        text-align: right;
    }

    .user-message .message-time {
        text-align: left;
        color: rgba(255, 255, 255, 0.7);
    }

    .chat-input-area {
        position: fixed;
        bottom: 0;
        left: 280px;
        right: 0;
        background: #1e293b;
        border-top: 1px solid #334155;
        padding: 1rem;
        z-index: 1000;
    }

    .input-container {
        max-width: 800px;
        margin: 0 auto;
    }

    .input-wrapper {
        display: flex;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .chat-input {
        flex: 1;
        padding: 0.75rem 1rem;
        background: #0f172a;
        border: 1px solid #334155;
        border-radius: 8px;
        color: #e2e8f0;
        font-size: 0.875rem;
        outline: none;
        transition: border-color 0.2s ease;
    }

    .chat-input:focus {
        border-color: #3b82f6;
    }

    .chat-input::placeholder {
        color: #64748b;
    }

    .send-btn {
        padding: 0.75rem 1rem;
        background: linear-gradient(135deg, #3b82f6, #6366f1);
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.2s ease;
        font-size: 1.125rem;
    }

    .send-btn:hover:not(:disabled) {
        background: linear-gradient(135deg, #2563eb, #4f46e5);
        transform: translateY(-1px);
    }

    .send-btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        transform: none;
    }

    .input-hint {
        text-align: center;
        color: #64748b;
        font-size: 0.75rem;
        margin: 0;
    }

    @@media (max-width: 768px) {
        .welcome-card {
            padding: 2rem 1rem;
        }

        .starter-grid {
            grid-template-columns: 1fr;
        }

        .message-content {
            max-width: 85%;
        }

        .chat-input-area {
            left: 0;
        }
    }
</style>

@code {
    private string currentMessage = "";
    private List<ChatMessage> messages = new();

    // Predefined prompts
    private string codeHelperPrompt = "Help me write a function in C#";
    private string explainTechPrompt = "Explain how Blazor WebAssembly works";
    private string codeReviewPrompt = "Review my code for best practices";
    private string brainstormPrompt = "Help me brainstorm ideas for my project";

    public class ChatMessage
    {
        public string Content { get; set; } = "";
        public bool IsUser { get; set; }
        public DateTime Timestamp { get; set; } = DateTime.Now;
    }

    private async Task SendMessage(string message)
    {
        if (string.IsNullOrWhiteSpace(message)) return;

        // Add user message
        messages.Add(new ChatMessage 
        { 
            Content = message.Trim(), 
            IsUser = true,
            Timestamp = DateTime.Now
        });

        currentMessage = "";
        StateHasChanged();

        // Simulate AI response (placeholder for now)
        await Task.Delay(1000);
        
        messages.Add(new ChatMessage 
        { 
            Content = "I'm T3.Clone, your AI assistant! I'm currently in development mode. Full chat functionality will be available soon. For now, I can acknowledge your message: \"" + message.Trim() + "\"",
            IsUser = false,
            Timestamp = DateTime.Now
        });

        StateHasChanged();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage(currentMessage);
        }
    }
} 